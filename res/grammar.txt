entry := topList "EOF"

topList := top topList | top ||
top := struct | topFunction | topDefinition | namespace | import | enumDef

import := "use" nChain! endOfStatement!
topFunction := properties "fn"? genericsOptional! id! "("?! declarationList! ")"?! returnType! blockStatement!
topDefinition := "global"? id! ":"? type! "="?! expression! endOfStatement!
namespace := id "{"? topList! "}"?!

//top struct
struct := properties "struct"? id! genericsOptional! "{"? structDefinitionList! "}"?!
structDefinitionList := structDefinition structDefinitionList ||
structDefinition := id ":"?! type! endOfStatement!


returnType := "->"? type! ||

enumDef := properties "enum"? id! genericsOptional! "{"?! enumEntries! "}"?! endOfStatement!
enumEntries := enumEntry enumEntries! ||
enumEntry := id "("?! typeList ")"?! endOfStatement!

id := "keyword"

declarationList := declaration ","? declarationList | declaration ||
declaration := id ":"? type

//type system
type := classType | arrayType | functionType | inlineType
typeList := type ","? typeList | type ||
classType := nChain genericsOptional
arrayType := "lst"? type!
functionType := "fn"? "("?! typeList! ")"?! "->"?! type!
inlineType := "{"? structDefinitionList! "}"?!

typeChain := "." id typeChain |  "." id ||
nChain := id typeChain


//properties
properties := property properties | property ||
property := native | strict | async
native :=  "native"
strict :=  "strict"
async :=  "async"

//statement
statement := blockStatement | definitionStatement | returnStatement | whileStatement | matchStatement | branchStatement | assignStatement | singleExpression
statementList := statement statementList ||
blockStatement := "{"? statementList! "}"?!
definitionStatement := typeOfDefinition id! typeOfVar! "="?! expression! endOfStatement!
whileStatement := "while"? expression! statement!
branchStatement := "if"? expression! matches! statement! endOfBranch!
returnStatement := "return"? returnValue!
returnValue := expression endOfStatement! | endOfStatement!

matches := "matches"? nChain "("?! idList ")"?! ||

matchStatement := "match"? expression! "{"?! matchEntries! "}"?! endOfBranch!
matchEntries := matchEntry matchEntries | matchEntry ||
matchEntry := nChain "("?! idList ")"?! "->"?! statement!

genericsOptional := generics ||
generics := "<"? idList! ">"?!

genericsOptionalType := genericsType ||
genericsType := "<"? typeList! ">"?!

singleExpression := expression endOfStatement!

assignStatement := member "="? expression! endOfStatement!
endOfStatement := ";"? ||

elseStatement := "else"? statement
endOfBranch := elseStatement ||

typeOfDefinition := "let" | "const"
typeOfVar := ":"? type! ||


expression := function | boolArithmetic | obj
boolArithmetic := comparisonArithmetic boolArithmeticFunc boolArithmetic! | comparisonArithmetic
comparisonArithmetic := arithmetic comparisonArithmeticFunc comparisonArithmetic! | arithmetic
arithmetic := term arithmeticFunc arithmetic! | term
term := factor termFunc term! | factor
factor := "("? boolArithmetic ")"?! | unary | not | number | boolLiteral | member | string

string := "string"

//objects and arrays
obj := complexObj | arrayObj
complexObj := "{"? objInitList! "}"?!
arrayObj := "["? argList! "]"?!
objInitList := objMember ","? objInitList | objMember ||
objMember := id "="? expression!



//factors
unary := "-"? factor
not := "!"? factor
number := "number"
boolLiteral := "false" | "true"

//member
member := id memberCompound | id
memberCompound := varTerminal memberCompound | varTerminal
varTerminal := memberAccess | callAccess | arrayAccess
memberAccess := "."? id!
callAccess := "("? argList! ")"?!
arrayAccess := "["? expression! "]"?!
argList := expression ","? argList | expression ||

//operators
termFunc := "*" | "/"
arithmeticFunc := "+" | "-"
comparisonArithmeticFunc := ">" | ">=" | "<" | "<=" | "==" | "!="
boolArithmeticFunc := "&&" | "||"

//functions
function := richFunction | anonymousFunction
anonymousFunction := "fn"? "("? idList ")"?! "->"?! statement!
richFunction := "fn"? "("? declarationList ")"?! "->"?! Type! statement!
idList := id ","? idList | id ||
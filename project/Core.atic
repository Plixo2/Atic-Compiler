enum Optional<T> {
    None();
    Some(T);
}

enum Result<T,E> {
    Error(E);
    Ok(T);
}

struct List<T> {
    size: number;
}

struct Map<K,V> {

}

fn <T> forEach(list: List<T>,consumer: fn(T) -> void) {
    let i: number = 0;
    let s: number = list.size;

    while i < s {
        let element: T = getAt(list,i);
        consumer(element);
        i = i + 1;
    }
}

native fn <T> print(o: T) {}
native fn <T> insert(list: List<T>, element: T) {}
native fn <T> newList() -> List<T> {}
native fn <K,V> newMap() -> Map<K,V> {}
native fn <T> addAll(list: List<T>, elements: List<T>) {}


native fn <K,V> get(map: Map<K,V>, key: K) -> Optional<V> {}
native fn <K,V> put(map: Map<K,V>, key: K, value: V) {}
native fn <T> getAt(map: List<T>, index: number) -> T {}
native fn <T> contains(list: List<T>, element: T) -> bool {}
native fn <T> containsArray(list: lst T, element: T) -> bool {}


native fn isDirectory(file: string) -> bool {}
native fn listFiles(file: string) -> List<string> {}
native fn loadFile(file: string) -> string {}
native fn getExtension(file: string) -> string {}
native fn regexTest(regex: string, text: string) -> bool {}
native fn <T> toString(object: T) -> string {}
